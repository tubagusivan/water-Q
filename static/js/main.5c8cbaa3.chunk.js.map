{"version":3,"sources":["assets/jernih.png","assets/kotor.png","component/Fish.js","component/Fishpond.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styled","div","props","bg","Wave","height","Status","status","Fishpond","data","setTdsQuality","level","background","jernih","kotor","className","map","value","key","style","width","margin","padding","backgroundColor","textTransform","color","fontWeight","fontSize","name","backgroundImage","id","description","calibration","water_level","Math","floor","tds_quality","standard_quality","min_tds_quality","min_temperature","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","state","database","ref","on","snapshot","val","setState","this","display","position","top","textAlign","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c8cbaa3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jernih.1e9b8f1b.png\";","module.exports = __webpack_public_path__ + \"static/media/kotor.d9dabec6.png\";","import styled from 'styled-components';\n\nconst Tes = styled.div`\n    display: block;\n    width: 300px;\n    height: 200px;\n    border: 1px solid #000;\n    // background-color: #000;\n    background: url(${props => props.bg});\n`;\n\nconst Wave = styled.div`\n    position: absolute;\n    content: \"\";\n    display: inline-block;\n    width: 100%;\n    height: ${props => props.height};\n    bottom: 0;\n    left: 0;\n    background: url(${props => props.bg});\n    background-size: cover;\n    transform-origin: center bottom;\n    z-index: 11;\n    animation: waves 3s linear infinite;\n    opacity: 0.6;\n  \n    &:before {\n        position: absolute;\n        content: \"\";\n        display: inline-block;\n        width: 100%;\n        height: ${props => props.height};\n        bottom: 0;\n        left: 0;\n        background: url(${props => props.bg});\n        background-size: cover;\n        transform-origin: center bottom;\n        z-index: 11;\n        animation: waves 3s linear infinite;\n        animation-direction: reverse;\n        opacity: 0.8;\n    }\n    &:after {\n        position: absolute;\n        content: \"\";\n        display: inline-block;\n        width: 100%;\n        height: ${props => props.height};\n        top: 0;\n        left: 0;\n        background: url(${props => props.bg});\n        background-size: cover;\n        transform-origin: center bottom;\n        z-index: 11;\n        animation: waves 3s linear infinite;\n        animation-delay: -5s;\n        opacity: 0.4;\n    }\n`;\n\nconst Status = styled.div`\n    position: absolute;\n    align-self: flex-start;\n    background: ${props => props.status === 'ready' ? 'green' : 'red'};\n    border-radius: 50%;\n    border: 2px solid #fff;\n    height: 30px;\n    width: 30px;\n    margin: -10px 0 0 338px;\n    animation: 0.5s ease infinite blip;\n`;\nexport {\n    Wave,\n    Tes,\n    Status\n}","import React from 'react';\nimport { Wave, Status } from './Fish'\nimport kotor from '../assets/kotor.png'\nimport jernih from '../assets/jernih.png'\n\nconst Fishpond = (props) => {\n    const {data} = props\n    \n    const setLevel =(level) => {\n        let height = Math.floor(600*7) / level;\n        return height + 'px';\n    }\n\n    const setTdsQuality = (level) => {\n        let background = jernih;\n        \n        if(level < 130) {\n            background = kotor;\n        } else if (level > 130) {\n            background = jernih;\n        }\n        return background;\n    }\n\n    return (\n        <div className=\"App \">\n            {\n                data && data.map((value, key) => {\n                    return (\n                        <div key={key}>\n                            <div>\n                                <Status status={value.status}/>\n                                <div style={{width: '100%', margin: '0px', padding: '10px 0px', backgroundColor: `${value.status === 'ready' ? 'green' : 'red'}`}}>\n                                    <span style={{textTransform: 'capitalize', padding: '10px', color: 'white', fontWeight: 'bold', fontSize: '14px'}}>{`${value.name}: ${value.status}`}</span>\n                                </div>\n                            </div>\n                            <div\n                                style={{\n                                    backgroundImage: `url(\"https://1.bp.blogspot.com/-yPWx-JutH3Y/WvPaRY0NBDI/AAAAAAAAAQU/A0hywJIxitEVpbeMMlPeXAvTBT96-iCPgCLcBGAs/s1600/tumblr_om4mnjEVt81uro097o1_400.gif\")`\n                                }}\n                                className=\"card\"\n                            >\n                            <div className=\"card-info\">\n                                <h4 className=\"card-title\">{`Id : ${value.id}`}</h4>\n                                <h4 className=\"card-title\">{`Name : ${value.name}`}</h4>\n                                <p className=\"card-description\">{`Description : ${value.description}`}</p>\n                                <Wave height={setLevel(value.calibration.water_level)} bg={setTdsQuality(value.calibration.tds_quality)}/>\n                                <div>\n                                    <h3>Standard Quality of {value.description}</h3>\n                                    <div>\n                                        <p>Min TDS Quality: {value.standard_quality.min_tds_quality}</p>\n                                        <p>Min Water Level: {value.standard_quality.min_temperature}</p>\n                                    </div>\n                                </div>\n                                <div>\n                                    <h3>Calibration</h3>\n                                    <p>TDS Quality: {value.calibration.tds_quality}</p>\n                                    <p>Water Level: {value.calibration.water_level}</p>\n                                </div>\n                            </div>\n                            </div>\n                            {/* <div className=\"card-button\">\n                                <button>Optimize</button>\n                            </div> */}\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default Fishpond;","import React from 'react';\nimport './App.css';\nimport Fishpond from './component/Fishpond';\n\nimport firebase from 'firebase';\n\nvar config = {\n  apiKey: \"AIzaSyApcmip4hkfL9qc8KzJpJqARWYUQ2NBh90\",\n  authDomain: \"quack-services.firebaseapp.com\",\n  databaseURL: \"https://quack-services-quackapipolda-staging.firebaseio.com/\",\n  projectId: \"quack-services\",\n  storageBucket: \"quack-services.appspot.com\",\n  messagingSenderId: \"119094971730\",\n};\nfirebase.initializeApp(config);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      data: null\n    }\n  }\n\n  componentDidMount() {\n    const fdb = firebase.database().ref('clean_water')\n    fdb.on('value', (snapshot) => {\n      let data = snapshot.val()\n      this.setState({data: data})\n    })\n  }\n\n  render () {\n    const {data} = this.state\n    return (\n      <div>\n        <div style={{display: 'block', position: 'fixed', width: '100%', top: 0, padding: '10px', backgroundColor: 'rgb(27, 156, 218)', textAlign: 'center'}}>\n          <h2 style={{color: '#fff', padding: 0, margin: 0}}>Clean Water Platform Solution (WaterQ)</h2>\n        </div>\n        \n        <Fishpond data={data} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}